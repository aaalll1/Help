from pyrogram import Client, filters
from pyrogram.types import Message
import platform
import socket
import psutil
import re
import uuid
from YukkiMusic import app
import pandas as pd
from config import owner

# Ø¯Ø§Ù„Ø© Ù„ØªØ­ÙˆÙŠÙ„ Ø§Ù„Ø¨Ø§ÙŠØªØ§Øª Ø¥Ù„Ù‰ ØµÙŠØºØ© Ù‚Ø±Ø§Ø¡Ø© Ø¨Ø´Ø±ÙŠØ©
def humanbytes(B):
    """ØªØ­ÙˆÙŠÙ„ Ø¨Ø§ÙŠØªØ§Øª Ø¥Ù„Ù‰ Ù‚Ø±Ø§Ø¡Ø© Ø¨Ø´Ø±ÙŠØ©"""
    B = float(B)
    KB = float(1024)
    MB = float(KB ** 2)  # 1,048,576
    GB = float(KB ** 3)  # 1,073,741,824
    TB = float(KB ** 4)  # 1,099,511,627,776

    if B < KB:
        return "{0} {1}".format(B, "Bytes" if 0 == B > 1 else "Byte")
    elif KB <= B < MB:
        return "{0:.2f} KB".format(B / KB)
    elif MB <= B < GB:
        return "{0:.2f} MB".format(B / MB)
    elif GB <= B < TB:
        return "{0:.2f} GB".format(B / GB)
    elif TB <= B:
        return "{0:.2f} TB".format(B / TB)

# Ø£Ù…Ø± sysinfo Ù„Ø¹Ø±Ø¶ Ù…Ø¹Ù„ÙˆÙ…Ø§Øª Ø§Ù„Ù†Ø¸Ø§Ù…
@app.on_message(command(["sysinfo"]))
async def fetch_system_information(client, message):
    if message.from_user.id != owner:
        await message.reply_text("Ù„Ø§ ØªÙ…ØªÙ„Ùƒ ØµÙ„Ø§Ø­ÙŠØ© Ù„Ø§Ø³ØªØ®Ø¯Ø§Ù… Ù‡Ø°Ø§ Ø§Ù„Ø£Ù…Ø±.")
        return

    splatform = platform.system()
    platform_release = platform.release()
    platform_version = platform.version()
    architecture = platform.machine()
    hostname = socket.gethostname()
    ip_address = socket.gethostbyname(socket.gethostname())
    mac_address = ":".join(re.findall("..", "%012x" % uuid.getnode()))
    processor = platform.processor()
    ram = humanbytes(round(psutil.virtual_memory().total))
    cpu_freq = psutil.cpu_freq().current
    if cpu_freq >= 1000:
        cpu_freq = f"{round(cpu_freq / 1000, 2)} GHz"
    else:
        cpu_freq = f"{round(cpu_freq, 2)} MHz"
    du = psutil.disk_usage(".")
    disk = f"{humanbytes(du.used)} / {humanbytes(du.total)} ({du.percent}%)"
    cpu_len = len(psutil.Process().cpu_affinity())

    somsg = f"""ðŸ–¥ **Ù…Ø¹Ù„ÙˆÙ…Ø§Øª Ø§Ù„Ù†Ø¸Ø§Ù…**

**Ù†Ø¸Ø§Ù… Ø§Ù„ØªØ´ØºÙŠÙ„ :** `{splatform}`
**Ø¥ØµØ¯Ø§Ø± Ù†Ø¸Ø§Ù… Ø§Ù„ØªØ´ØºÙŠÙ„ :** `{platform_release}`
**Ù†Ø³Ø®Ø© Ù†Ø¸Ø§Ù… Ø§Ù„ØªØ´ØºÙŠÙ„ :** `{platform_version}`
**Ø§Ù„Ù…Ø¹Ù…Ø§Ø±ÙŠØ© :** `{architecture}`
**Ø§Ø³Ù… Ø§Ù„Ø¬Ù‡Ø§Ø² :** `{hostname}`
**Ø¹Ù†ÙˆØ§Ù† IP :** `{ip_address}`
**Ø¹Ù†ÙˆØ§Ù† MAC :** `{mac_address}`
**Ø§Ù„Ù…Ø¹Ø§Ù„Ø¬ :** `{processor}`
**Ø§Ù„Ø°Ø§ÙƒØ±Ø© Ø§Ù„Ø¹Ø´ÙˆØ§Ø¦ÙŠØ© (RAM) :** `{ram}`
**Ø¹Ø¯Ø¯ Ù…Ø¹Ø§Ù„Ø¬Ø§Øª Ø§Ù„Ù€ CPU :** `{cpu_len}`
**ØªØ±Ø¯Ø¯ Ø§Ù„Ù€ CPU :** `{cpu_freq}`
**Ù…Ø³Ø§Ø­Ø© Ø§Ù„Ù‚Ø±Øµ :** `{disk}`
"""

    await message.reply_text(somsg)
